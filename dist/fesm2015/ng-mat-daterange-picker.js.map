{"version":3,"file":"ng-mat-daterange-picker.js","sources":["ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/services/range-store.service.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/services/config-store.service.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.animations.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.component.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/services/calendar-overlay.service.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/ngx-mat-drp/ngx-mat-drp.component.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/calendar-wrapper/calendar-wrapper.component.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/presets/presets.component.ts","ng://ng-mat-daterange-picker/src/app/modules/ngx-mat-drp/ngx-mat-drp.module.ts","ng://ng-mat-daterange-picker/ng-mat-daterange-picker.ts"],"sourcesContent":["import { Injectable, Inject, InjectionToken } from '@angular/core';\r\nimport { Range } from '../model/model';\r\nimport { Subject } from 'rxjs';\r\n/* import { DATE } from '../ngx-drp.module'; */\r\n\r\nexport const DATE = new InjectionToken<Date>('date');\r\n\r\n@Injectable()\r\nexport class RangeStoreService {\r\n  rangeUpdate$: Subject<Range> = new Subject<Range>();\r\n\r\n  constructor(\r\n    @Inject(DATE) private _fromDate: Date,\r\n    @Inject(DATE) private _toDate: Date\r\n  ) {}\r\n\r\n  /* set fromDate(fromDate:Date) {\r\n    this._fromDate = fromDate;\r\n  } */\r\n\r\n  get fromDate(): Date {\r\n    return this._fromDate;\r\n  }\r\n\r\n  /* set toDate(toDate:Date) {\r\n    this._toDate = toDate;\r\n  } */\r\n\r\n  get toDate(): Date {\r\n    return this._toDate;\r\n  }\r\n\r\n  updateRange(fromDate: Date = this._fromDate, toDate: Date = this._toDate) {\r\n    this._fromDate = fromDate;\r\n    this._toDate = toDate;\r\n    this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxDrpOptions } from '../model/model';\r\n\r\n@Injectable()\r\nexport class ConfigStoreService {\r\n  private _ngxDrpOptions: NgxDrpOptions;\r\n  private defaultOptions = {\r\n    excludeWeekends: false,\r\n    animation: true,\r\n    locale: 'en-US',\r\n    fromMinMax: { fromDate: null, toDate: null },\r\n    toMinMax: { fromDate: null, toDate: null }\r\n  };\r\n\r\n  constructor() {}\r\n\r\n  get ngxDrpOptions(): NgxDrpOptions {\r\n    return this._ngxDrpOptions;\r\n  }\r\n\r\n  set ngxDrpOptions(options: NgxDrpOptions) {\r\n    this._ngxDrpOptions = { ...this.defaultOptions, ...options };\r\n  }\r\n}\r\n","import {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n  group\r\n} from '@angular/animations';\r\n\r\nexport const pickerOverlayAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n} = {\r\n  /** Transforms the height of the picker overlay content. */\r\n  transformPanel: trigger('transformPickerOverlay', [\r\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\r\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\r\n    transition('void => enter', group([\r\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ])),\r\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\r\n  ])\r\n};\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { PresetItem, NgxDrpOptions } from '../model/model';\r\nimport { RangeStoreService } from '../services/range-store.service';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { ConfigStoreService } from '../services/config-store.service';\r\nimport { pickerOverlayAnimations } from './picker-overlay.animations';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-drp-picker-overlay',\r\n  templateUrl: './picker-overlay.component.html',\r\n  styleUrls: ['./picker-overlay.component.css'],\r\n  animations: [pickerOverlayAnimations.transformPanel],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PickerOverlayComponent implements OnInit {\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  fromMinDate: Date;\r\n  fromMaxDate: Date;\r\n  toMinDate: Date;\r\n  toMaxDate: Date;\r\n  presets: Array<PresetItem> = [];\r\n  startDatePrefix: string;\r\n  endDatePrefix: string;\r\n  applyLabel: string;\r\n  cancelLabel: string;\r\n  shouldAnimate: string;\r\n\r\n  constructor(\r\n    private rangeStoreService: RangeStoreService,\r\n    private configStoreService: ConfigStoreService,\r\n    private overlayRef: OverlayRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.fromDate = this.rangeStoreService.fromDate;\r\n    this.toDate = this.rangeStoreService.toDate;\r\n    this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\r\n    this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\r\n    this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\r\n    this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\r\n    this.presets = this.configStoreService.ngxDrpOptions.presets;\r\n    this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\r\n      ? 'enter'\r\n      : 'noop';\r\n    ({\r\n      fromDate: this.fromMinDate,\r\n      toDate: this.fromMaxDate\r\n    } = this.configStoreService.ngxDrpOptions.fromMinMax);\r\n    ({\r\n      fromDate: this.toMinDate,\r\n      toDate: this.toMaxDate\r\n    } = this.configStoreService.ngxDrpOptions.toMinMax);\r\n  }\r\n\r\n  updateFromDate(date) {\r\n    this.fromDate = date;\r\n  }\r\n\r\n  updateToDate(date) {\r\n    this.toDate = date;\r\n  }\r\n\r\n  updateRangeByPreset(presetItem: PresetItem) {\r\n    this.updateFromDate(presetItem.range.fromDate);\r\n    this.updateToDate(presetItem.range.toDate);\r\n  }\r\n\r\n  applyNewDates(e) {\r\n    this.rangeStoreService.updateRange(this.fromDate, this.toDate);\r\n    this.disposeOverLay();\r\n  }\r\n\r\n  discardNewDates(e) {\r\n    // this.rangeStoreService.updateRange();\r\n    this.disposeOverLay();\r\n  }\r\n\r\n  private disposeOverLay() {\r\n    this.overlayRef.dispose();\r\n  }\r\n}\r\n","import { Injectable, ElementRef, Injector } from '@angular/core';\r\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\r\nimport { NgxDrpOptions, CalendarOverlayConfig } from '../model/model';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { PickerOverlayComponent } from '../picker-overlay/picker-overlay.component';\r\n\r\nconst DEFAULT_CONFIG: CalendarOverlayConfig = {\r\n  panelClass: 'ngx-mat-drp-overlay',\r\n  hasBackdrop: true,\r\n  backdropClass: 'ngx-mat-drp-overlay-backdrop',\r\n  shouldCloseOnBackdropClick: true\r\n};\r\n\r\n@Injectable()\r\nexport class CalendarOverlayService {\r\n  private hostElemRef: ElementRef;\r\n\r\n  constructor(private overlay: Overlay, private injector: Injector) {}\r\n\r\n  open(\r\n    config: CalendarOverlayConfig = {},\r\n    hostElemRef: ElementRef\r\n  ): OverlayRef {\r\n    this.hostElemRef = hostElemRef;\r\n    const overlayConfig = { ...DEFAULT_CONFIG, ...config };\r\n    const overlayRef = this.createOverlay(overlayConfig);\r\n    const portalInjector = this.createInjector(overlayRef);\r\n    const calendarPortal = new ComponentPortal(\r\n      PickerOverlayComponent,\r\n      null,\r\n      portalInjector\r\n    );\r\n    overlayRef.attach(calendarPortal);\r\n\r\n    overlayRef\r\n      .backdropClick()\r\n      .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\r\n      .subscribe(() => overlayRef.dispose());\r\n\r\n    return overlayRef;\r\n  }\r\n\r\n  private createOverlay(config: CalendarOverlayConfig): OverlayRef {\r\n    const overlayConfig = this.getOverlayConfig(config);\r\n    return this.overlay.create(overlayConfig);\r\n  }\r\n\r\n  private getOverlayConfig(config: CalendarOverlayConfig): OverlayConfig {\r\n    const positionStrategy = this.overlay\r\n      .position()\r\n      .flexibleConnectedTo(this.hostElemRef)\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withDefaultOffsetY(12)\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n\r\n    const overlayConfig = new OverlayConfig({\r\n      hasBackdrop: config.hasBackdrop,\r\n      backdropClass: config.backdropClass,\r\n      panelClass: config.panelClass,\r\n      scrollStrategy: this.overlay.scrollStrategies.block(),\r\n      positionStrategy\r\n    });\r\n\r\n    return overlayConfig;\r\n  }\r\n\r\n  private createInjector(overlayRef: OverlayRef): PortalInjector {\r\n    const injectionTokens = new WeakMap();\r\n    injectionTokens.set(OverlayRef, overlayRef);\r\n\r\n    return new PortalInjector(this.injector, injectionTokens);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { CalendarOverlayService } from '../services/calendar-overlay.service';\r\nimport { RangeStoreService } from '../services/range-store.service';\r\nimport { Range, NgxDrpOptions } from '../model/model';\r\nimport { ConfigStoreService } from '../services/config-store.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-drp',\r\n  templateUrl: './ngx-mat-drp.component.html',\r\n  styleUrls: ['./ngx-mat-drp.component.css'],\r\n  providers: [\r\n    CalendarOverlayService,\r\n    RangeStoreService,\r\n    ConfigStoreService,\r\n    DatePipe\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatDrpComponent implements OnInit, OnDestroy {\r\n  @ViewChild('calendarInput', {static: false})\r\n  calendarInput;\r\n  @Output()\r\n  readonly selectedDateRangeChanged: EventEmitter<Range> = new EventEmitter<Range>();\r\n  @Input()\r\n  options: NgxDrpOptions;\r\n  private rangeUpdate$: Subscription;\r\n  selectedDateRange = '';\r\n\r\n  constructor(\r\n    private changeDetectionRef: ChangeDetectorRef,\r\n    private calendarOverlayService: CalendarOverlayService,\r\n    public rangeStoreService: RangeStoreService,\r\n    public configStoreService: ConfigStoreService,\r\n    private datePipe: DatePipe\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.configStoreService.ngxDrpOptions = this.options;\r\n    this.options.placeholder = this.options.placeholder || 'Choose a date';\r\n    this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\r\n      const from: string = this.formatToDateString(\r\n        range.fromDate,\r\n        this.options.format\r\n      );\r\n      const to: string = this.formatToDateString(\r\n        range.toDate,\r\n        this.options.format\r\n      );\r\n      this.selectedDateRange = `${from} - ${to}`;\r\n      this.selectedDateRangeChanged.emit(range);\r\n    });\r\n\r\n    this.rangeStoreService.updateRange(\r\n      this.options.range.fromDate,\r\n      this.options.range.toDate\r\n    );\r\n    this.changeDetectionRef.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.rangeUpdate$) {\r\n      this.rangeUpdate$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private formatToDateString(date: Date, format: string): string {\r\n    return this.datePipe.transform(date, format);\r\n  }\r\n\r\n  openCalendar(event) {\r\n    const overlayRef: OverlayRef = this.calendarOverlayService.open(\r\n      this.options.calendarOverlayConfig,\r\n      this.calendarInput\r\n    );\r\n  }\r\n\r\n  public resetDates(range: Range) {\r\n    this.rangeStoreService.updateRange(\r\n      range.fromDate,\r\n      range.toDate\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ViewChild,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { MatCalendar } from '@angular/material/datepicker';\r\nimport { ConfigStoreService } from '../services/config-store.service';\r\n\r\n@Component({\r\n  selector: 'calendar-wrapper',\r\n  templateUrl: './calendar-wrapper.component.html',\r\n  styleUrls: ['./calendar-wrapper.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CalendarWrapperComponent implements OnChanges {\r\n  @ViewChild(MatCalendar, {static: false})\r\n  matCalendar: MatCalendar<Date>;\r\n\r\n  @Output()\r\n  readonly selectedDateChange: EventEmitter<Date> = new EventEmitter<Date>();\r\n\r\n  dateFormat: string;\r\n  @Input() selectedDate: Date;\r\n  @Input() prefixLabel: string;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  weekendFilter = (d: Date) => true;\r\n\r\n  constructor(private configStore: ConfigStoreService) {\r\n    this.dateFormat = configStore.ngxDrpOptions.format;\r\n    if (configStore.ngxDrpOptions.excludeWeekends) {\r\n      this.weekendFilter = (d: Date): boolean => {\r\n        const day = d.getDay();\r\n        return day !== 0 && day !== 6;\r\n      };\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Necessary to force view refresh\r\n    this.matCalendar.activeDate = changes.selectedDate.currentValue;\r\n  }\r\n\r\n  onSelectedChange(date) {\r\n    this.selectedDateChange.emit(date);\r\n  }\r\n\r\n  onYearSelected(e) {}\r\n\r\n  onUserSelection(e) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { PresetItem } from '../model/model';\r\n\r\n@Component({\r\n  selector: 'mat-drp-presets',\r\n  templateUrl: './presets.component.html',\r\n  styleUrls: ['./presets.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PresetsComponent implements OnInit {\r\n  @Input()\r\n  presets: Array<PresetItem>;\r\n  @Output()\r\n  readonly presetChanged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  setPresetPeriod(event) {\r\n    this.presetChanged.emit(event);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxMatDrpComponent } from './ngx-mat-drp/ngx-mat-drp.component';\r\nimport { PickerOverlayComponent } from './picker-overlay/picker-overlay.component';\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\n\r\nimport { CalendarWrapperComponent } from './calendar-wrapper/calendar-wrapper.component';\r\nimport { PresetsComponent } from './presets/presets.component';\r\nimport { DATE } from './services/range-store.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    OverlayModule\r\n  ],\r\n  declarations: [\r\n    NgxMatDrpComponent,\r\n    CalendarWrapperComponent,\r\n    PickerOverlayComponent,\r\n    PresetsComponent\r\n  ],\r\n  providers: [\r\n    {provide: DATE, useValue: new Date()}\r\n  ],\r\n  entryComponents: [PickerOverlayComponent],\r\n  exports: [NgxMatDrpComponent]\r\n})\r\nexport class NgxMatDrpModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {pickerOverlayAnimations as ɵa} from './src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.animations';"],"names":[],"mappings":"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"}